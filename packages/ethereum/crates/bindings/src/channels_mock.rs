pub use channels_mock::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod channels_mock {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    pub use super::super::shared_types::*;
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "ChannelsMock was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_secsClosure\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"multiaddr\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Announcement\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"newCommitment\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"channelBalance\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelBumped\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint32\",\"name\":\"closureFinalizationTime\",\"type\":\"uint32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"channelBalance\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelClosureFinalized\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint32\",\"name\":\"closureInitiationTime\",\"type\":\"uint32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelClosureInitiated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelFunded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ChannelOpened\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"struct HoprChannels.Channel\",\"name\":\"newState\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"enum HoprChannels.ChannelStatus\",\"name\":\"status\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"channelEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"closureTime\",\"type\":\"uint32\",\"components\":[]}],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"nextCommitment\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"winProb\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TicketRedeemed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"FUND_CHANNEL_MULTI_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"TOKENS_RECIPIENT_INTERFACE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"multiaddr\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"announce\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"newCommitment\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bumpChannel\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"enum HoprChannels.ChannelStatus\",\"name\":\"status\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"channelEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"closureTime\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"computeChallengeInternal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"finalizeChannelClosure\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account1\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account2\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fundChannelMulti\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getChannelIdInternal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"recipientCounter\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"channelIteration\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"winProb\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getEncodedTicketInternal\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"recipientCounter\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"channelIteration\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"winProb\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getTicketHashInternal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ticketHash\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"secretPreImage\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getTicketLuckInternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initiateChannelClosure\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"publicKeys\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"nextCommitment\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"winProb\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeemTicket\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"secsClosure\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tokensReceived\",\"outputs\":[]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static CHANNELSMOCK_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static CHANNELSMOCK_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x600061010081905261012081905261014081905261016052608060e081905261018060405280523480156200003357600080fd5b5060405162002cc338038062002cc3833981016040819052620000569162000167565b81816001600160a01b038216620000b35760405162461bcd60e51b815260206004820152601760248201527f746f6b656e206d757374206e6f7420626520656d707479000000000000000000604482015260640160405180910390fd5b6001600160a01b03821660a05263ffffffff811660c0526040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200014457600080fd5b505af115801562000159573d6000803e3d6000fd5b5050505050505050620001b9565b600080604083850312156200017b57600080fd5b82516001600160a01b03811681146200019357600080fd5b602084015190925063ffffffff81168114620001ae57600080fd5b809150509250929050565b60805160a05160c051612ab062000213600039600081816101bd01526113b90152600081816103bd015281816103ea015281816107cb01528181610f19015261102601526000818161017001526104c50152612ab06000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c806372581cc0116100ad578063ac9650d811610071578063ac9650d81461035f578063b4037e801461037f578063b7bbca8a14610392578063eab4fef6146103a5578063fc0c546a146103b857600080fd5b806372581cc0146102725780637a7ebd7b14610299578063967b6a3514610301578063a3d6f9a914610321578063a632a21b1461033457600080fd5b8063275621d1116100f4578063275621d1146101b857806328f7fd78146101f45780632bcead2f146102075780633a47dff11461021a5780634341abdd1461025f57600080fd5b806223de2914610130578063030f3b2214610145578063048a097d1461016b578063075e389f14610192578063249cb3fa146101a5575b600080fd5b61014361013e366004612130565b6103df565b005b6101586101533660046121e1565b6105a6565b6040519081526020015b60405180910390f35b6101587f000000000000000000000000000000000000000000000000000000000000000081565b6101436101a036600461221a565b6105b9565b6101586101b3366004612237565b610849565b6101df7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610162565b61014361020236600461225c565b6108a0565b6101436102153660046122de565b61098c565b6101586102283660046123dc565b6040805160208082019590955280820193909352606080840192909252805180840390920182526080909201909152805191012090565b61014361026d366004612408565b610f9f565b6101587fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b81565b6102ee6102a736600461244e565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919260ff9091169163ffffffff1687565b604051610162979695949392919061249f565b61031461030f3660046124e7565b6110cf565b6040516101629190612598565b61031461032f36600461221a565b6110ec565b61034761034236600461244e565b611186565b6040516001600160a01b039091168152602001610162565b61037261036d3660046125ab565b611197565b6040516101629190612620565b61014361038d36600461221a565b61128c565b6101436103a0366004612682565b611489565b6101586103b33660046124e7565b61163b565b6103477f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461045c5760405162461bcd60e51b815260206004820152601860248201527f63616c6c6572206d75737420626520486f7072546f6b656e000000000000000060448201526064015b60405180910390fd5b6001600160a01b03861630146104c35760405162461bcd60e51b815260206004820152602660248201527f6d7573742062652073656e64696e6720746f6b656e7320746f20486f70724368604482015265616e6e656c7360d01b6064820152608401610453565b7f0000000000000000000000000000000000000000000000000000000000000000830361059c5760008080806104fb87890189612408565b9296509094509250905061050f81836126c4565b89146105735760405162461bcd60e51b815260206004820152602d60248201527f616d6f756e742073656e74206d75737420626520657175616c20746f20616d6f60448201526c1d5b9d081cdc1958da599a5959609a1b6064820152608401610453565b8115610585576105858b85858561164f565b8015610597576105978b84868461164f565b505050505b5050505050505050565b60006105b283836119cd565b9392505050565b33816001600160a01b03811682036105e35760405162461bcd60e51b8152600401610453906126dc565b6001600160a01b0382166106095760405162461bcd60e51b815260040161045390612727565b6001600160a01b03811661062f5760405162461bcd60e51b81526004016104539061275e565b600061063b3385611a17565b915060039050600482015460ff16600381111561065a5761065a612467565b146106a75760405162461bcd60e51b815260206004820181905260248201527f6368616e6e656c206d7573742062652070656e64696e6720746f20636c6f73656044820152606401610453565b600681015463ffffffff4281169116106107035760405162461bcd60e51b815260206004820152601e60248201527f636c6f7375726554696d65206d757374206265206265666f7265206e6f7700006044820152606401610453565b805460068201546040805163ffffffff9092168252602082018390526001600160a01b0387169133917fe685c05e0c2d3e8915b3dc7cd37e2aac94887e856025d6295360af16183c9f9c910160405180910390a36000825560068201805463ffffffff1916905560048201805460ff191690556040516001600160a01b038616903390600080516020612a5b833981519152906107a1908690612795565b60405180910390a380156108425760405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561081c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084091906127f1565b505b5050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166108785760006105b2565b507fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b492915050565b60405133906108b29086908690612813565b6040519081900390206001600160a01b0316146109245760405162461bcd60e51b815260206004820152602a60248201527f7075626c69634b65792773206164647265737320646f6573206e6f74206d617460448201526963682073656e6465727360b01b6064820152608401610453565b33600090815260016020526040902061093e908585612040565b50336001600160a01b03167f5df480f8854903a456738589684a9c046d81dbba3e9cb83d5f6f1bbf3f1cba328585858560405161097e949392919061284c565b60405180910390a250505050565b87336001600160a01b0382168190036109b75760405162461bcd60e51b8152600401610453906126dc565b6001600160a01b0382166109dd5760405162461bcd60e51b815260040161045390612727565b6001600160a01b038116610a035760405162461bcd60e51b81526004016104539061275e565b88610a505760405162461bcd60e51b815260206004820181905260248201527f6e657874436f6d6d69746d656e74206d757374206e6f7420626520656d7074796044820152606401610453565b84610a9d5760405162461bcd60e51b815260206004820152601860248201527f616d6f756e74206d757374206e6f7420626520656d70747900000000000000006044820152606401610453565b6000610aa98b33611a17565b915060029050600482015460ff166003811115610ac857610ac8612467565b1480610aec57506003600482015460ff166003811115610aea57610aea612467565b145b610b525760405162461bcd60e51b815260206004820152603160248201527f7370656e64696e67206368616e6e656c206d757374206265206f70656e206f726044820152702070656e64696e6720746f20636c6f736560781b6064820152608401610453565b60408051602081018c90520160405160208183030381529060405280519060200120816001015414610bd95760405162461bcd60e51b815260206004820152602a60248201527f636f6d6d69746d656e74206d7573742062652068617368206f66206e6578742060448201526918dbdb5b5a5d1b595b9d60b21b6064820152608401610453565b88816002015414610c2c5760405162461bcd60e51b815260206004820152601760248201527f7469636b65742065706f6368206d757374206d617463680000000000000000006044820152606401610453565b87816003015410610c7f5760405162461bcd60e51b815260206004820152601c60248201527f726564656d7074696f6e73206d75737420626520696e206f72646572000000006044820152606401610453565b6000610cec610c9b3384600201548b86600501548c8f8d611a42565b8051602091820120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c019052805191012090565b90508b6001600160a01b0316610d028287611abb565b6001600160a01b031614610d635760405162461bcd60e51b815260206004820152602260248201527f7369676e6572206d757374206d617463682074686520636f756e746572706172604482015261747960f01b6064820152608401610453565b6040805160208082018490528183018e905260608083018c90528351808403909101815260809092019092528051910120861015610dda5760405162461bcd60e51b81526020600482015260146024820152733a34b1b5b2ba1036bab9ba1031329030903bb4b760611b6044820152606401610453565b60038201899055600182018b90558154610df590889061287e565b82556000610e03338e611a17565b915050336001600160a01b03168d6001600160a01b0316600080516020612a5b83398151915285604051610e379190612795565b60405180910390a3336001600160a01b03168d6001600160a01b03167f862117d954cb13fb5dbae8b4bdb5dc0d551725fc3af4c0e34350c194ba3588218e8e8e8e8e8e8e604051610e8e9796959493929190612895565b60405180910390a36002600482015460ff166003811115610eb157610eb1612467565b03610efd578054610ec39089906126c4565b81556040516001600160a01b038e16903390600080516020612a5b83398151915290610ef0908590612795565b60405180910390a3610f90565b60405163a9059cbb60e01b8152336004820152602481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e91906127f1565b505b50505050505050505050505050565b6000610fab82846126c4565b11610ff85760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610453565b811561100a5761100a3385858561164f565b801561101c5761101c3384868461164f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd333061105785876126c4565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084291906127f1565b60606110e088888888888888611a42565b98975050505050505050565b60016020526000908152604090208054611105906128d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611131906128d9565b801561117e5780601f106111535761010080835404028352916020019161117e565b820191906000526020600020905b81548152906001019060200180831161116157829003601f168201915b505050505081565b600061119182611adf565b92915050565b60608167ffffffffffffffff8111156111b2576111b26122c8565b6040519080825280602002602001820160405280156111e557816020015b60608152602001906001900390816111d05790505b50905060005b82811015611285576112553085858481811061120957611209612913565b905060200281019061121b9190612929565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bce92505050565b82828151811061126757611267612913565b6020026020010181905250808061127d90612970565b9150506111eb565b5092915050565b33816001600160a01b03811682036112b65760405162461bcd60e51b8152600401610453906126dc565b6001600160a01b0382166112dc5760405162461bcd60e51b815260040161045390612727565b6001600160a01b0381166113025760405162461bcd60e51b81526004016104539061275e565b600061130e3385611a17565b915060029050600482015460ff16600381111561132d5761132d612467565b148061135157506001600482015460ff16600381111561134f5761134f612467565b145b6113b45760405162461bcd60e51b815260206004820152602e60248201527f6368616e6e656c206d757374206265206f70656e206f722077616974696e672060448201526d199bdc8818dbdb5b5a5d1b595b9d60921b6064820152608401610453565b6113de7f000000000000000000000000000000000000000000000000000000000000000042612989565b60068201805463ffffffff9290921663ffffffff1990921691909117905560048101805460ff191660031790556040516001600160a01b038516903390600080516020612a5b83398151915290611436908590612795565b60405180910390a36001600160a01b038416337f33fa346a7a012d012279164042f6783bf49d701f28b0d8cd0103ef57f9919f0f4260405163ffffffff909116815260200160405180910390a350505050565b81336001600160a01b0382168190036114b45760405162461bcd60e51b8152600401610453906126dc565b6001600160a01b0382166114da5760405162461bcd60e51b815260040161045390612727565b6001600160a01b0381166115005760405162461bcd60e51b81526004016104539061275e565b600061150c8533611a17565b915084905061155d5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742073657420656d70747920636f6d6d69746d656e7400000000006044820152606401610453565b60018082018590556002820154611573916126c4565b60028201556001600482015460ff16600381111561159357611593612467565b036115a85760048101805460ff191660021790555b336001600160a01b0316856001600160a01b0316600080516020612a5b833981519152836040516115d99190612795565b60405180910390a36002810154815460408051878152602081019390935282015233906001600160a01b038716907f3ed4218941b780517f978f5c9b88cd51f7010c9468cf3ea55422098c81755a7e9060600160405180910390a35050505050565b60006110e0610c9b89898989898989611a42565b8282806001600160a01b0316826001600160a01b0316036116825760405162461bcd60e51b8152600401610453906126dc565b6001600160a01b0382166116a85760405162461bcd60e51b815260040161045390612727565b6001600160a01b0381166116ce5760405162461bcd60e51b81526004016104539061275e565b6000831161171e5760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610453565b6001600160a01b03851660009081526001602052604090208054611741906128d9565b90506000036117925760405162461bcd60e51b815260206004820152601860248201527f736f7572636520686173206e6f7420616e6e6f756e63656400000000000000006044820152606401610453565b6001600160a01b038416600090815260016020526040902080546117b5906128d9565b90506000036118065760405162461bcd60e51b815260206004820152601d60248201527f64657374696e6174696f6e20686173206e6f7420616e6e6f756e6365640000006044820152606401610453565b60006118128686611a17565b915060039050600482015460ff16600381111561183157611831612467565b0361187e5760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f742066756e64206120636c6f73696e67206368616e6e656c0000006044820152606401610453565b6000600482015460ff16600381111561189957611899612467565b036119285760058101546118ae9060016126c4565b600582015560006002820181905560038201556001810154156119185760048101805460ff191660021790556040516001600160a01b0380871691908816907fdd90f938230335e59dc925c57ecb0e27a28c2d87356e31f00cd5554abd6c1b2d90600090a3611928565b60048101805460ff191660011790555b80546119359085906126c4565b81556040516001600160a01b038087169190881690600080516020612a5b83398151915290611965908590612795565b60405180910390a3846001600160a01b0316866001600160a01b0316886001600160a01b03167f4b4ab74078c30b1983f2e92a76c9d915b471f0689ecbfea501b3bf3299f6c010876040516119bc91815260200190565b60405180910390a450505050505050565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b6000806000611a2685856119cd565b60008181526002602052604090209093509150505b9250929050565b60606000611a4f87611adf565b6040516bffffffffffffffffffffffff1960608c811b8216602084015283901b166034820152604881018a9052606881018790526088810185905260a8810186905260c8810188905290915060e801604051602081830303815290604052915050979650505050505050565b6000806000611aca8585611bf3565b91509150611ad781611c5e565b509392505050565b600070014551231950b75fc4402da1732fc9bebe1982611b115760405162461bcd60e51b8152600401610453906129b1565b808310611b305760405162461bcd60e51b8152600401610453906129b1565b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798601b600060018183858780611b6857611b68612a01565b878b096040805160008152602081018083529590955260ff909316928401929092526060830152608082015260a0016020604051602081039080840390855afa158015611bb9573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60606105b28383604051806060016040528060278152602001612a3460279139611e17565b6000808251604103611c295760208301516040840151606085015160001a611c1d87828585611eeb565b94509450505050611a3b565b8251604003611c525760208301516040840151611c47868383611fd8565b935093505050611a3b565b50600090506002611a3b565b6000816004811115611c7257611c72612467565b03611c7a5750565b6001816004811115611c8e57611c8e612467565b03611cdb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610453565b6002816004811115611cef57611cef612467565b03611d3c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610453565b6003816004811115611d5057611d50612467565b03611da85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610453565b6004816004811115611dbc57611dbc612467565b03611e145760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610453565b50565b6060833b611e765760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610453565b600080856001600160a01b031685604051611e919190612a17565b600060405180830381855af49150503d8060008114611ecc576040519150601f19603f3d011682016040523d82523d6000602084013e611ed1565b606091505b5091509150611ee1828286612007565b9695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611f225750600090506003611fcf565b8460ff16601b14158015611f3a57508460ff16601c14155b15611f4b5750600090506004611fcf565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f9f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611fc857600060019250925050611fcf565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01611ff987828885611eeb565b935093505050935093915050565b606083156120165750816105b2565b8251156120265782518084602001fd5b8160405162461bcd60e51b81526004016104539190612598565b82805461204c906128d9565b90600052602060002090601f01602090048101928261206e57600085556120b4565b82601f106120875782800160ff198235161785556120b4565b828001600101855582156120b4579182015b828111156120b4578235825591602001919060010190612099565b506120c09291506120c4565b5090565b5b808211156120c057600081556001016120c5565b6001600160a01b0381168114611e1457600080fd5b60008083601f84011261210057600080fd5b50813567ffffffffffffffff81111561211857600080fd5b602083019150836020828501011115611a3b57600080fd5b60008060008060008060008060c0898b03121561214c57600080fd5b8835612157816120d9565b97506020890135612167816120d9565b96506040890135612177816120d9565b955060608901359450608089013567ffffffffffffffff8082111561219b57600080fd5b6121a78c838d016120ee565b909650945060a08b01359150808211156121c057600080fd5b506121cd8b828c016120ee565b999c989b5096995094979396929594505050565b600080604083850312156121f457600080fd5b82356121ff816120d9565b9150602083013561220f816120d9565b809150509250929050565b60006020828403121561222c57600080fd5b81356105b2816120d9565b6000806040838503121561224a57600080fd5b82359150602083013561220f816120d9565b6000806000806040858703121561227257600080fd5b843567ffffffffffffffff8082111561228a57600080fd5b612296888389016120ee565b909650945060208701359150808211156122af57600080fd5b506122bc878288016120ee565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080610100898b0312156122fb57600080fd5b8835612306816120d9565b97506020890135965060408901359550606089013594506080890135935060a0890135925060c0890135915060e089013567ffffffffffffffff8082111561234d57600080fd5b818b0191508b601f83011261236157600080fd5b813581811115612373576123736122c8565b604051601f8201601f19908116603f0116810190838211818310171561239b5761239b6122c8565b816040528281528e60208487010111156123b457600080fd5b8260208601602083013760006020848301015280955050505050509295985092959890939650565b6000806000606084860312156123f157600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561241e57600080fd5b8435612429816120d9565b93506020850135612439816120d9565b93969395505050506040820135916060013590565b60006020828403121561246057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061249b57634e487b7160e01b600052602160045260246000fd5b9052565b600060e0820190508882528760208301528660408301528560608301526124c9608083018661247d565b8360a083015263ffffffff831660c083015298975050505050505050565b600080600080600080600060e0888a03121561250257600080fd5b873561250d816120d9565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b60005b8381101561255757818101518382015260200161253f565b83811115612566576000848401525b50505050565b6000815180845261258481602086016020860161253c565b601f01601f19169290920160200192915050565b6020815260006105b2602083018461256c565b600080602083850312156125be57600080fd5b823567ffffffffffffffff808211156125d657600080fd5b818501915085601f8301126125ea57600080fd5b8135818111156125f957600080fd5b8660208260051b850101111561260e57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561267557603f1988860301845261266385835161256c565b94509285019290850190600101612647565b5092979650505050505050565b6000806040838503121561269557600080fd5b82356126a0816120d9565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156126d7576126d76126ae565b500190565b6020808252602b908201527f736f7572636520616e642064657374696e6174696f6e206d757374206e6f742060408201526a6265207468652073616d6560a81b606082015260800190565b60208082526018908201527f736f75726365206d757374206e6f7420626520656d7074790000000000000000604082015260600190565b6020808252601d908201527f64657374696e6174696f6e206d757374206e6f7420626520656d707479000000604082015260600190565b81548152600182015460208201526002820154604082015260038201546060820152600482015460e082019060ff166127d1608084018261247d565b50600583015460a083015260069092015463ffffffff1660c09091015290565b60006020828403121561280357600080fd5b815180151581146105b257600080fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612860604083018688612823565b8281036020840152612873818587612823565b979650505050505050565b600082821015612890576128906126ae565b500390565b8781528660208201528560408201528460608201528360808201528260a082015260e060c082015260006128cc60e083018461256c565b9998505050505050505050565b600181811c908216806128ed57607f821691505b60208210810361290d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261294057600080fd5b83018035915067ffffffffffffffff82111561295b57600080fd5b602001915036819003821315611a3b57600080fd5b600060018201612982576129826126ae565b5060010190565b600063ffffffff8083168185168083038211156129a8576129a86126ae565b01949350505050565b60208082526030908201527f496e76616c696420726573706f6e73652e2056616c7565206d7573742062652060408201526f1dda5d1a1a5b881d1a1948199a595b1960821b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008251612a2981846020870161253c565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a564bc94452694932bff57ef0cc1e5c10e8a698bf56fb7623572236cb4a77b18a2646970667358221220c5647043e8567b37f4705cc31b49fbafbb078af1e8a81cbd102812ab1dfeec0264736f6c634300080d0033" . parse () . expect ("invalid bytecode")
        });
    pub struct ChannelsMock<M>(ethers::contract::Contract<M>);
    impl<M> Clone for ChannelsMock<M> {
        fn clone(&self) -> Self {
            ChannelsMock(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for ChannelsMock<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for ChannelsMock<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(ChannelsMock))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> ChannelsMock<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), CHANNELSMOCK_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                CHANNELSMOCK_ABI.clone(),
                CHANNELSMOCK_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `FUND_CHANNEL_MULTI_SIZE` (0x048a097d) function"]
        pub fn fund_channel_multi_size(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([4, 138, 9, 125], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `TOKENS_RECIPIENT_INTERFACE_HASH` (0x72581cc0) function"]
        pub fn tokens_recipient_interface_hash(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([114, 88, 28, 192], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `announce` (0x28f7fd78) function"]
        pub fn announce(
            &self,
            public_key: ethers::core::types::Bytes,
            multiaddr: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([40, 247, 253, 120], (public_key, multiaddr))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bumpChannel` (0xb7bbca8a) function"]
        pub fn bump_channel(
            &self,
            source: ethers::core::types::Address,
            new_commitment: [u8; 32],
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([183, 187, 202, 138], (source, new_commitment))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `canImplementInterfaceForAddress` (0x249cb3fa) function"]
        pub fn can_implement_interface_for_address(
            &self,
            interface_hash: [u8; 32],
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([36, 156, 179, 250], (interface_hash, account))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `channels` (0x7a7ebd7b) function"]
        pub fn channels(
            &self,
            p0: [u8; 32],
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                [u8; 32],
                ethers::core::types::U256,
                ethers::core::types::U256,
                u8,
                ethers::core::types::U256,
                u32,
            ),
        > {
            self.0
                .method_hash([122, 126, 189, 123], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `computeChallengeInternal` (0xa632a21b) function"]
        pub fn compute_challenge_internal(
            &self,
            response: [u8; 32],
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([166, 50, 162, 27], response)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `finalizeChannelClosure` (0x075e389f) function"]
        pub fn finalize_channel_closure(
            &self,
            destination: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([7, 94, 56, 159], destination)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `fundChannelMulti` (0x4341abdd) function"]
        pub fn fund_channel_multi(
            &self,
            account_1: ethers::core::types::Address,
            account_2: ethers::core::types::Address,
            amount_1: ethers::core::types::U256,
            amount_2: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [67, 65, 171, 221],
                    (account_1, account_2, amount_1, amount_2),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getChannelIdInternal` (0x030f3b22) function"]
        pub fn get_channel_id_internal(
            &self,
            party_a: ethers::core::types::Address,
            party_b: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([3, 15, 59, 34], (party_a, party_b))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getEncodedTicketInternal` (0x967b6a35) function"]
        pub fn get_encoded_ticket_internal(
            &self,
            recipient: ethers::core::types::Address,
            recipient_counter: ethers::core::types::U256,
            proof_of_relay_secret: [u8; 32],
            channel_iteration: ethers::core::types::U256,
            amount: ethers::core::types::U256,
            ticket_index: ethers::core::types::U256,
            win_prob: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Bytes> {
            self.0
                .method_hash(
                    [150, 123, 106, 53],
                    (
                        recipient,
                        recipient_counter,
                        proof_of_relay_secret,
                        channel_iteration,
                        amount,
                        ticket_index,
                        win_prob,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getTicketHashInternal` (0xeab4fef6) function"]
        pub fn get_ticket_hash_internal(
            &self,
            recipient: ethers::core::types::Address,
            recipient_counter: ethers::core::types::U256,
            proof_of_relay_secret: [u8; 32],
            channel_iteration: ethers::core::types::U256,
            amount: ethers::core::types::U256,
            ticket_index: ethers::core::types::U256,
            win_prob: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash(
                    [234, 180, 254, 246],
                    (
                        recipient,
                        recipient_counter,
                        proof_of_relay_secret,
                        channel_iteration,
                        amount,
                        ticket_index,
                        win_prob,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getTicketLuckInternal` (0x3a47dff1) function"]
        pub fn get_ticket_luck_internal(
            &self,
            ticket_hash: [u8; 32],
            secret_pre_image: [u8; 32],
            proof_of_relay_secret: [u8; 32],
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [58, 71, 223, 241],
                    (ticket_hash, secret_pre_image, proof_of_relay_secret),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `initiateChannelClosure` (0xb4037e80) function"]
        pub fn initiate_channel_closure(
            &self,
            destination: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([180, 3, 126, 128], destination)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `multicall` (0xac9650d8) function"]
        pub fn multicall(
            &self,
            data: ::std::vec::Vec<ethers::core::types::Bytes>,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<ethers::core::types::Bytes>>
        {
            self.0
                .method_hash([172, 150, 80, 216], data)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `publicKeys` (0xa3d6f9a9) function"]
        pub fn public_keys(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Bytes> {
            self.0
                .method_hash([163, 214, 249, 169], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `redeemTicket` (0x2bcead2f) function"]
        pub fn redeem_ticket(
            &self,
            source: ethers::core::types::Address,
            next_commitment: [u8; 32],
            ticket_epoch: ethers::core::types::U256,
            ticket_index: ethers::core::types::U256,
            proof_of_relay_secret: [u8; 32],
            amount: ethers::core::types::U256,
            win_prob: ethers::core::types::U256,
            signature: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [43, 206, 173, 47],
                    (
                        source,
                        next_commitment,
                        ticket_epoch,
                        ticket_index,
                        proof_of_relay_secret,
                        amount,
                        win_prob,
                        signature,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `secsClosure` (0x275621d1) function"]
        pub fn secs_closure(&self) -> ethers::contract::builders::ContractCall<M, u32> {
            self.0
                .method_hash([39, 86, 33, 209], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token` (0xfc0c546a) function"]
        pub fn token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([252, 12, 84, 106], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tokensReceived` (0x0023de29) function"]
        pub fn tokens_received(
            &self,
            operator: ethers::core::types::Address,
            from: ethers::core::types::Address,
            to: ethers::core::types::Address,
            amount: ethers::core::types::U256,
            user_data: ethers::core::types::Bytes,
            operator_data: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [0, 35, 222, 41],
                    (operator, from, to, amount, user_data, operator_data),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `Announcement` event"]
        pub fn announcement_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AnnouncementFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ChannelBumped` event"]
        pub fn channel_bumped_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ChannelBumpedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ChannelClosureFinalized` event"]
        pub fn channel_closure_finalized_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ChannelClosureFinalizedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ChannelClosureInitiated` event"]
        pub fn channel_closure_initiated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ChannelClosureInitiatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ChannelFunded` event"]
        pub fn channel_funded_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ChannelFundedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ChannelOpened` event"]
        pub fn channel_opened_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ChannelOpenedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ChannelUpdated` event"]
        pub fn channel_updated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ChannelUpdatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TicketRedeemed` event"]
        pub fn ticket_redeemed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TicketRedeemedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, ChannelsMockEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for ChannelsMock<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "Announcement", abi = "Announcement(address,bytes,bytes)")]
    pub struct AnnouncementFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
        pub public_key: ethers::core::types::Bytes,
        pub multiaddr: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "ChannelBumped",
        abi = "ChannelBumped(address,address,bytes32,uint256,uint256)"
    )]
    pub struct ChannelBumpedFilter {
        #[ethevent(indexed)]
        pub source: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ethers::core::types::Address,
        pub new_commitment: [u8; 32],
        pub ticket_epoch: ethers::core::types::U256,
        pub channel_balance: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "ChannelClosureFinalized",
        abi = "ChannelClosureFinalized(address,address,uint32,uint256)"
    )]
    pub struct ChannelClosureFinalizedFilter {
        #[ethevent(indexed)]
        pub source: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ethers::core::types::Address,
        pub closure_finalization_time: u32,
        pub channel_balance: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "ChannelClosureInitiated",
        abi = "ChannelClosureInitiated(address,address,uint32)"
    )]
    pub struct ChannelClosureInitiatedFilter {
        #[ethevent(indexed)]
        pub source: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ethers::core::types::Address,
        pub closure_initiation_time: u32,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "ChannelFunded",
        abi = "ChannelFunded(address,address,address,uint256)"
    )]
    pub struct ChannelFundedFilter {
        #[ethevent(indexed)]
        pub funder: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub source: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "ChannelOpened", abi = "ChannelOpened(address,address)")]
    pub struct ChannelOpenedFilter {
        #[ethevent(indexed)]
        pub source: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "ChannelUpdated",
        abi = "ChannelUpdated(address,address,(uint256,bytes32,uint256,uint256,uint8,uint256,uint32))"
    )]
    pub struct ChannelUpdatedFilter {
        #[ethevent(indexed)]
        pub source: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ethers::core::types::Address,
        pub new_state: Channel,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "TicketRedeemed",
        abi = "TicketRedeemed(address,address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)"
    )]
    pub struct TicketRedeemedFilter {
        #[ethevent(indexed)]
        pub source: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ethers::core::types::Address,
        pub next_commitment: [u8; 32],
        pub ticket_epoch: ethers::core::types::U256,
        pub ticket_index: ethers::core::types::U256,
        pub proof_of_relay_secret: [u8; 32],
        pub amount: ethers::core::types::U256,
        pub win_prob: ethers::core::types::U256,
        pub signature: ethers::core::types::Bytes,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ChannelsMockEvents {
        AnnouncementFilter(AnnouncementFilter),
        ChannelBumpedFilter(ChannelBumpedFilter),
        ChannelClosureFinalizedFilter(ChannelClosureFinalizedFilter),
        ChannelClosureInitiatedFilter(ChannelClosureInitiatedFilter),
        ChannelFundedFilter(ChannelFundedFilter),
        ChannelOpenedFilter(ChannelOpenedFilter),
        ChannelUpdatedFilter(ChannelUpdatedFilter),
        TicketRedeemedFilter(TicketRedeemedFilter),
    }
    impl ethers::contract::EthLogDecode for ChannelsMockEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AnnouncementFilter::decode_log(log) {
                return Ok(ChannelsMockEvents::AnnouncementFilter(decoded));
            }
            if let Ok(decoded) = ChannelBumpedFilter::decode_log(log) {
                return Ok(ChannelsMockEvents::ChannelBumpedFilter(decoded));
            }
            if let Ok(decoded) = ChannelClosureFinalizedFilter::decode_log(log) {
                return Ok(ChannelsMockEvents::ChannelClosureFinalizedFilter(decoded));
            }
            if let Ok(decoded) = ChannelClosureInitiatedFilter::decode_log(log) {
                return Ok(ChannelsMockEvents::ChannelClosureInitiatedFilter(decoded));
            }
            if let Ok(decoded) = ChannelFundedFilter::decode_log(log) {
                return Ok(ChannelsMockEvents::ChannelFundedFilter(decoded));
            }
            if let Ok(decoded) = ChannelOpenedFilter::decode_log(log) {
                return Ok(ChannelsMockEvents::ChannelOpenedFilter(decoded));
            }
            if let Ok(decoded) = ChannelUpdatedFilter::decode_log(log) {
                return Ok(ChannelsMockEvents::ChannelUpdatedFilter(decoded));
            }
            if let Ok(decoded) = TicketRedeemedFilter::decode_log(log) {
                return Ok(ChannelsMockEvents::TicketRedeemedFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for ChannelsMockEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ChannelsMockEvents::AnnouncementFilter(element) => element.fmt(f),
                ChannelsMockEvents::ChannelBumpedFilter(element) => element.fmt(f),
                ChannelsMockEvents::ChannelClosureFinalizedFilter(element) => element.fmt(f),
                ChannelsMockEvents::ChannelClosureInitiatedFilter(element) => element.fmt(f),
                ChannelsMockEvents::ChannelFundedFilter(element) => element.fmt(f),
                ChannelsMockEvents::ChannelOpenedFilter(element) => element.fmt(f),
                ChannelsMockEvents::ChannelUpdatedFilter(element) => element.fmt(f),
                ChannelsMockEvents::TicketRedeemedFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `FUND_CHANNEL_MULTI_SIZE` function with signature `FUND_CHANNEL_MULTI_SIZE()` and selector `[4, 138, 9, 125]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "FUND_CHANNEL_MULTI_SIZE", abi = "FUND_CHANNEL_MULTI_SIZE()")]
    pub struct FundChannelMultiSizeCall;
    #[doc = "Container type for all input parameters for the `TOKENS_RECIPIENT_INTERFACE_HASH` function with signature `TOKENS_RECIPIENT_INTERFACE_HASH()` and selector `[114, 88, 28, 192]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "TOKENS_RECIPIENT_INTERFACE_HASH",
        abi = "TOKENS_RECIPIENT_INTERFACE_HASH()"
    )]
    pub struct TokensRecipientInterfaceHashCall;
    #[doc = "Container type for all input parameters for the `announce` function with signature `announce(bytes,bytes)` and selector `[40, 247, 253, 120]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "announce", abi = "announce(bytes,bytes)")]
    pub struct AnnounceCall {
        pub public_key: ethers::core::types::Bytes,
        pub multiaddr: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `bumpChannel` function with signature `bumpChannel(address,bytes32)` and selector `[183, 187, 202, 138]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "bumpChannel", abi = "bumpChannel(address,bytes32)")]
    pub struct BumpChannelCall {
        pub source: ethers::core::types::Address,
        pub new_commitment: [u8; 32],
    }
    #[doc = "Container type for all input parameters for the `canImplementInterfaceForAddress` function with signature `canImplementInterfaceForAddress(bytes32,address)` and selector `[36, 156, 179, 250]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "canImplementInterfaceForAddress",
        abi = "canImplementInterfaceForAddress(bytes32,address)"
    )]
    pub struct CanImplementInterfaceForAddressCall {
        pub interface_hash: [u8; 32],
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `channels` function with signature `channels(bytes32)` and selector `[122, 126, 189, 123]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "channels", abi = "channels(bytes32)")]
    pub struct ChannelsCall(pub [u8; 32]);
    #[doc = "Container type for all input parameters for the `computeChallengeInternal` function with signature `computeChallengeInternal(bytes32)` and selector `[166, 50, 162, 27]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "computeChallengeInternal",
        abi = "computeChallengeInternal(bytes32)"
    )]
    pub struct ComputeChallengeInternalCall {
        pub response: [u8; 32],
    }
    #[doc = "Container type for all input parameters for the `finalizeChannelClosure` function with signature `finalizeChannelClosure(address)` and selector `[7, 94, 56, 159]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "finalizeChannelClosure",
        abi = "finalizeChannelClosure(address)"
    )]
    pub struct FinalizeChannelClosureCall {
        pub destination: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `fundChannelMulti` function with signature `fundChannelMulti(address,address,uint256,uint256)` and selector `[67, 65, 171, 221]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "fundChannelMulti",
        abi = "fundChannelMulti(address,address,uint256,uint256)"
    )]
    pub struct FundChannelMultiCall {
        pub account_1: ethers::core::types::Address,
        pub account_2: ethers::core::types::Address,
        pub amount_1: ethers::core::types::U256,
        pub amount_2: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getChannelIdInternal` function with signature `getChannelIdInternal(address,address)` and selector `[3, 15, 59, 34]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getChannelIdInternal",
        abi = "getChannelIdInternal(address,address)"
    )]
    pub struct GetChannelIdInternalCall {
        pub party_a: ethers::core::types::Address,
        pub party_b: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getEncodedTicketInternal` function with signature `getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)` and selector `[150, 123, 106, 53]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getEncodedTicketInternal",
        abi = "getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)"
    )]
    pub struct GetEncodedTicketInternalCall {
        pub recipient: ethers::core::types::Address,
        pub recipient_counter: ethers::core::types::U256,
        pub proof_of_relay_secret: [u8; 32],
        pub channel_iteration: ethers::core::types::U256,
        pub amount: ethers::core::types::U256,
        pub ticket_index: ethers::core::types::U256,
        pub win_prob: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getTicketHashInternal` function with signature `getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)` and selector `[234, 180, 254, 246]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getTicketHashInternal",
        abi = "getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)"
    )]
    pub struct GetTicketHashInternalCall {
        pub recipient: ethers::core::types::Address,
        pub recipient_counter: ethers::core::types::U256,
        pub proof_of_relay_secret: [u8; 32],
        pub channel_iteration: ethers::core::types::U256,
        pub amount: ethers::core::types::U256,
        pub ticket_index: ethers::core::types::U256,
        pub win_prob: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getTicketLuckInternal` function with signature `getTicketLuckInternal(bytes32,bytes32,bytes32)` and selector `[58, 71, 223, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getTicketLuckInternal",
        abi = "getTicketLuckInternal(bytes32,bytes32,bytes32)"
    )]
    pub struct GetTicketLuckInternalCall {
        pub ticket_hash: [u8; 32],
        pub secret_pre_image: [u8; 32],
        pub proof_of_relay_secret: [u8; 32],
    }
    #[doc = "Container type for all input parameters for the `initiateChannelClosure` function with signature `initiateChannelClosure(address)` and selector `[180, 3, 126, 128]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "initiateChannelClosure",
        abi = "initiateChannelClosure(address)"
    )]
    pub struct InitiateChannelClosureCall {
        pub destination: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `multicall` function with signature `multicall(bytes[])` and selector `[172, 150, 80, 216]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "multicall", abi = "multicall(bytes[])")]
    pub struct MulticallCall {
        pub data: ::std::vec::Vec<ethers::core::types::Bytes>,
    }
    #[doc = "Container type for all input parameters for the `publicKeys` function with signature `publicKeys(address)` and selector `[163, 214, 249, 169]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "publicKeys", abi = "publicKeys(address)")]
    pub struct PublicKeysCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `redeemTicket` function with signature `redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)` and selector `[43, 206, 173, 47]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "redeemTicket",
        abi = "redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)"
    )]
    pub struct RedeemTicketCall {
        pub source: ethers::core::types::Address,
        pub next_commitment: [u8; 32],
        pub ticket_epoch: ethers::core::types::U256,
        pub ticket_index: ethers::core::types::U256,
        pub proof_of_relay_secret: [u8; 32],
        pub amount: ethers::core::types::U256,
        pub win_prob: ethers::core::types::U256,
        pub signature: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `secsClosure` function with signature `secsClosure()` and selector `[39, 86, 33, 209]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "secsClosure", abi = "secsClosure()")]
    pub struct SecsClosureCall;
    #[doc = "Container type for all input parameters for the `token` function with signature `token()` and selector `[252, 12, 84, 106]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "token", abi = "token()")]
    pub struct TokenCall;
    #[doc = "Container type for all input parameters for the `tokensReceived` function with signature `tokensReceived(address,address,address,uint256,bytes,bytes)` and selector `[0, 35, 222, 41]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "tokensReceived",
        abi = "tokensReceived(address,address,address,uint256,bytes,bytes)"
    )]
    pub struct TokensReceivedCall {
        pub operator: ethers::core::types::Address,
        pub from: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        pub user_data: ethers::core::types::Bytes,
        pub operator_data: ethers::core::types::Bytes,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ChannelsMockCalls {
        FundChannelMultiSize(FundChannelMultiSizeCall),
        TokensRecipientInterfaceHash(TokensRecipientInterfaceHashCall),
        Announce(AnnounceCall),
        BumpChannel(BumpChannelCall),
        CanImplementInterfaceForAddress(CanImplementInterfaceForAddressCall),
        Channels(ChannelsCall),
        ComputeChallengeInternal(ComputeChallengeInternalCall),
        FinalizeChannelClosure(FinalizeChannelClosureCall),
        FundChannelMulti(FundChannelMultiCall),
        GetChannelIdInternal(GetChannelIdInternalCall),
        GetEncodedTicketInternal(GetEncodedTicketInternalCall),
        GetTicketHashInternal(GetTicketHashInternalCall),
        GetTicketLuckInternal(GetTicketLuckInternalCall),
        InitiateChannelClosure(InitiateChannelClosureCall),
        Multicall(MulticallCall),
        PublicKeys(PublicKeysCall),
        RedeemTicket(RedeemTicketCall),
        SecsClosure(SecsClosureCall),
        Token(TokenCall),
        TokensReceived(TokensReceivedCall),
    }
    impl ethers::core::abi::AbiDecode for ChannelsMockCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <FundChannelMultiSizeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::FundChannelMultiSize(decoded));
            }
            if let Ok(decoded) =
                <TokensRecipientInterfaceHashCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ChannelsMockCalls::TokensRecipientInterfaceHash(decoded));
            }
            if let Ok(decoded) =
                <AnnounceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::Announce(decoded));
            }
            if let Ok(decoded) =
                <BumpChannelCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::BumpChannel(decoded));
            }
            if let Ok(decoded) =
                <CanImplementInterfaceForAddressCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ChannelsMockCalls::CanImplementInterfaceForAddress(decoded));
            }
            if let Ok(decoded) =
                <ChannelsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::Channels(decoded));
            }
            if let Ok(decoded) =
                <ComputeChallengeInternalCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ChannelsMockCalls::ComputeChallengeInternal(decoded));
            }
            if let Ok(decoded) =
                <FinalizeChannelClosureCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::FinalizeChannelClosure(decoded));
            }
            if let Ok(decoded) =
                <FundChannelMultiCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::FundChannelMulti(decoded));
            }
            if let Ok(decoded) =
                <GetChannelIdInternalCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::GetChannelIdInternal(decoded));
            }
            if let Ok(decoded) =
                <GetEncodedTicketInternalCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ChannelsMockCalls::GetEncodedTicketInternal(decoded));
            }
            if let Ok(decoded) =
                <GetTicketHashInternalCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::GetTicketHashInternal(decoded));
            }
            if let Ok(decoded) =
                <GetTicketLuckInternalCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::GetTicketLuckInternal(decoded));
            }
            if let Ok(decoded) =
                <InitiateChannelClosureCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::InitiateChannelClosure(decoded));
            }
            if let Ok(decoded) =
                <MulticallCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::Multicall(decoded));
            }
            if let Ok(decoded) =
                <PublicKeysCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::PublicKeys(decoded));
            }
            if let Ok(decoded) =
                <RedeemTicketCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::RedeemTicket(decoded));
            }
            if let Ok(decoded) =
                <SecsClosureCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::SecsClosure(decoded));
            }
            if let Ok(decoded) = <TokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::Token(decoded));
            }
            if let Ok(decoded) =
                <TokensReceivedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ChannelsMockCalls::TokensReceived(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for ChannelsMockCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                ChannelsMockCalls::FundChannelMultiSize(element) => element.encode(),
                ChannelsMockCalls::TokensRecipientInterfaceHash(element) => element.encode(),
                ChannelsMockCalls::Announce(element) => element.encode(),
                ChannelsMockCalls::BumpChannel(element) => element.encode(),
                ChannelsMockCalls::CanImplementInterfaceForAddress(element) => element.encode(),
                ChannelsMockCalls::Channels(element) => element.encode(),
                ChannelsMockCalls::ComputeChallengeInternal(element) => element.encode(),
                ChannelsMockCalls::FinalizeChannelClosure(element) => element.encode(),
                ChannelsMockCalls::FundChannelMulti(element) => element.encode(),
                ChannelsMockCalls::GetChannelIdInternal(element) => element.encode(),
                ChannelsMockCalls::GetEncodedTicketInternal(element) => element.encode(),
                ChannelsMockCalls::GetTicketHashInternal(element) => element.encode(),
                ChannelsMockCalls::GetTicketLuckInternal(element) => element.encode(),
                ChannelsMockCalls::InitiateChannelClosure(element) => element.encode(),
                ChannelsMockCalls::Multicall(element) => element.encode(),
                ChannelsMockCalls::PublicKeys(element) => element.encode(),
                ChannelsMockCalls::RedeemTicket(element) => element.encode(),
                ChannelsMockCalls::SecsClosure(element) => element.encode(),
                ChannelsMockCalls::Token(element) => element.encode(),
                ChannelsMockCalls::TokensReceived(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for ChannelsMockCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ChannelsMockCalls::FundChannelMultiSize(element) => element.fmt(f),
                ChannelsMockCalls::TokensRecipientInterfaceHash(element) => element.fmt(f),
                ChannelsMockCalls::Announce(element) => element.fmt(f),
                ChannelsMockCalls::BumpChannel(element) => element.fmt(f),
                ChannelsMockCalls::CanImplementInterfaceForAddress(element) => element.fmt(f),
                ChannelsMockCalls::Channels(element) => element.fmt(f),
                ChannelsMockCalls::ComputeChallengeInternal(element) => element.fmt(f),
                ChannelsMockCalls::FinalizeChannelClosure(element) => element.fmt(f),
                ChannelsMockCalls::FundChannelMulti(element) => element.fmt(f),
                ChannelsMockCalls::GetChannelIdInternal(element) => element.fmt(f),
                ChannelsMockCalls::GetEncodedTicketInternal(element) => element.fmt(f),
                ChannelsMockCalls::GetTicketHashInternal(element) => element.fmt(f),
                ChannelsMockCalls::GetTicketLuckInternal(element) => element.fmt(f),
                ChannelsMockCalls::InitiateChannelClosure(element) => element.fmt(f),
                ChannelsMockCalls::Multicall(element) => element.fmt(f),
                ChannelsMockCalls::PublicKeys(element) => element.fmt(f),
                ChannelsMockCalls::RedeemTicket(element) => element.fmt(f),
                ChannelsMockCalls::SecsClosure(element) => element.fmt(f),
                ChannelsMockCalls::Token(element) => element.fmt(f),
                ChannelsMockCalls::TokensReceived(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<FundChannelMultiSizeCall> for ChannelsMockCalls {
        fn from(var: FundChannelMultiSizeCall) -> Self {
            ChannelsMockCalls::FundChannelMultiSize(var)
        }
    }
    impl ::std::convert::From<TokensRecipientInterfaceHashCall> for ChannelsMockCalls {
        fn from(var: TokensRecipientInterfaceHashCall) -> Self {
            ChannelsMockCalls::TokensRecipientInterfaceHash(var)
        }
    }
    impl ::std::convert::From<AnnounceCall> for ChannelsMockCalls {
        fn from(var: AnnounceCall) -> Self {
            ChannelsMockCalls::Announce(var)
        }
    }
    impl ::std::convert::From<BumpChannelCall> for ChannelsMockCalls {
        fn from(var: BumpChannelCall) -> Self {
            ChannelsMockCalls::BumpChannel(var)
        }
    }
    impl ::std::convert::From<CanImplementInterfaceForAddressCall> for ChannelsMockCalls {
        fn from(var: CanImplementInterfaceForAddressCall) -> Self {
            ChannelsMockCalls::CanImplementInterfaceForAddress(var)
        }
    }
    impl ::std::convert::From<ChannelsCall> for ChannelsMockCalls {
        fn from(var: ChannelsCall) -> Self {
            ChannelsMockCalls::Channels(var)
        }
    }
    impl ::std::convert::From<ComputeChallengeInternalCall> for ChannelsMockCalls {
        fn from(var: ComputeChallengeInternalCall) -> Self {
            ChannelsMockCalls::ComputeChallengeInternal(var)
        }
    }
    impl ::std::convert::From<FinalizeChannelClosureCall> for ChannelsMockCalls {
        fn from(var: FinalizeChannelClosureCall) -> Self {
            ChannelsMockCalls::FinalizeChannelClosure(var)
        }
    }
    impl ::std::convert::From<FundChannelMultiCall> for ChannelsMockCalls {
        fn from(var: FundChannelMultiCall) -> Self {
            ChannelsMockCalls::FundChannelMulti(var)
        }
    }
    impl ::std::convert::From<GetChannelIdInternalCall> for ChannelsMockCalls {
        fn from(var: GetChannelIdInternalCall) -> Self {
            ChannelsMockCalls::GetChannelIdInternal(var)
        }
    }
    impl ::std::convert::From<GetEncodedTicketInternalCall> for ChannelsMockCalls {
        fn from(var: GetEncodedTicketInternalCall) -> Self {
            ChannelsMockCalls::GetEncodedTicketInternal(var)
        }
    }
    impl ::std::convert::From<GetTicketHashInternalCall> for ChannelsMockCalls {
        fn from(var: GetTicketHashInternalCall) -> Self {
            ChannelsMockCalls::GetTicketHashInternal(var)
        }
    }
    impl ::std::convert::From<GetTicketLuckInternalCall> for ChannelsMockCalls {
        fn from(var: GetTicketLuckInternalCall) -> Self {
            ChannelsMockCalls::GetTicketLuckInternal(var)
        }
    }
    impl ::std::convert::From<InitiateChannelClosureCall> for ChannelsMockCalls {
        fn from(var: InitiateChannelClosureCall) -> Self {
            ChannelsMockCalls::InitiateChannelClosure(var)
        }
    }
    impl ::std::convert::From<MulticallCall> for ChannelsMockCalls {
        fn from(var: MulticallCall) -> Self {
            ChannelsMockCalls::Multicall(var)
        }
    }
    impl ::std::convert::From<PublicKeysCall> for ChannelsMockCalls {
        fn from(var: PublicKeysCall) -> Self {
            ChannelsMockCalls::PublicKeys(var)
        }
    }
    impl ::std::convert::From<RedeemTicketCall> for ChannelsMockCalls {
        fn from(var: RedeemTicketCall) -> Self {
            ChannelsMockCalls::RedeemTicket(var)
        }
    }
    impl ::std::convert::From<SecsClosureCall> for ChannelsMockCalls {
        fn from(var: SecsClosureCall) -> Self {
            ChannelsMockCalls::SecsClosure(var)
        }
    }
    impl ::std::convert::From<TokenCall> for ChannelsMockCalls {
        fn from(var: TokenCall) -> Self {
            ChannelsMockCalls::Token(var)
        }
    }
    impl ::std::convert::From<TokensReceivedCall> for ChannelsMockCalls {
        fn from(var: TokensReceivedCall) -> Self {
            ChannelsMockCalls::TokensReceived(var)
        }
    }
    #[doc = "Container type for all return fields from the `FUND_CHANNEL_MULTI_SIZE` function with signature `FUND_CHANNEL_MULTI_SIZE()` and selector `[4, 138, 9, 125]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct FundChannelMultiSizeReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `TOKENS_RECIPIENT_INTERFACE_HASH` function with signature `TOKENS_RECIPIENT_INTERFACE_HASH()` and selector `[114, 88, 28, 192]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct TokensRecipientInterfaceHashReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `canImplementInterfaceForAddress` function with signature `canImplementInterfaceForAddress(bytes32,address)` and selector `[36, 156, 179, 250]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct CanImplementInterfaceForAddressReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `channels` function with signature `channels(bytes32)` and selector `[122, 126, 189, 123]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct ChannelsReturn {
        pub balance: ethers::core::types::U256,
        pub commitment: [u8; 32],
        pub ticket_epoch: ethers::core::types::U256,
        pub ticket_index: ethers::core::types::U256,
        pub status: u8,
        pub channel_epoch: ethers::core::types::U256,
        pub closure_time: u32,
    }
    #[doc = "Container type for all return fields from the `computeChallengeInternal` function with signature `computeChallengeInternal(bytes32)` and selector `[166, 50, 162, 27]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct ComputeChallengeInternalReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `getChannelIdInternal` function with signature `getChannelIdInternal(address,address)` and selector `[3, 15, 59, 34]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetChannelIdInternalReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `getEncodedTicketInternal` function with signature `getEncodedTicketInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)` and selector `[150, 123, 106, 53]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetEncodedTicketInternalReturn(pub ethers::core::types::Bytes);
    #[doc = "Container type for all return fields from the `getTicketHashInternal` function with signature `getTicketHashInternal(address,uint256,bytes32,uint256,uint256,uint256,uint256)` and selector `[234, 180, 254, 246]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetTicketHashInternalReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `getTicketLuckInternal` function with signature `getTicketLuckInternal(bytes32,bytes32,bytes32)` and selector `[58, 71, 223, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetTicketLuckInternalReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `multicall` function with signature `multicall(bytes[])` and selector `[172, 150, 80, 216]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct MulticallReturn {
        pub results: ::std::vec::Vec<ethers::core::types::Bytes>,
    }
    #[doc = "Container type for all return fields from the `publicKeys` function with signature `publicKeys(address)` and selector `[163, 214, 249, 169]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct PublicKeysReturn(pub ethers::core::types::Bytes);
    #[doc = "Container type for all return fields from the `secsClosure` function with signature `secsClosure()` and selector `[39, 86, 33, 209]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct SecsClosureReturn(pub u32);
    #[doc = "Container type for all return fields from the `token` function with signature `token()` and selector `[252, 12, 84, 106]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct TokenReturn(pub ethers::core::types::Address);
}
