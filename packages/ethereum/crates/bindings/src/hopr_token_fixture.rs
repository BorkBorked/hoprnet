pub use hopr_token_fixture::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod hopr_token_fixture {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "HoprTokenFixture was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"hoprToken\",\"outputs\":[{\"internalType\":\"contract HoprToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static HOPRTOKENFIXTURE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static HOPRTOKENFIXTURE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6000805462ff00001960ff19909116600117166201000017905573f39fd6e51aad88f6f4ce6ab8827279cfffb9226660809081527fac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff8060a052610140604090815260e081815260c0916147a16101003990528051600880546001600160a01b0319166001600160a01b03909216919091178155602080830151600955604083015180516100af92600a920190610226565b50505060405180606001604052807370997970c51812dc3a010c7d01b50e0d17dc79c86001600160a01b031681526020017f59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d81526020016040518060600160405280604081526020016147616040913990528051600b80546001600160a01b0319166001600160a01b03909216919091178155602080830151600c556040830151805161016092600d920190610226565b5050506040518060600160405280733c44cdddb6a900fa2b585dd299e03d12fa4293bc6001600160a01b031681526020017f5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a81526020016040518060600160405280604081526020016147e16040913990528051600e80546001600160a01b0319166001600160a01b03909216919091178155602080830151600f5560408301518051610211926010920190610226565b50505034801561022057600080fd5b506102b9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061026757805160ff1916838001178555610294565b82800160010185558215610294579182015b82811115610294578251825591602001919060010190610279565b506102a09291506102a4565b5090565b5b808211156102a057600081556001016102a5565b614499806102c86000396000f3fe60806040523480156200001157600080fd5b5060043610620000945760003560e01c8063ba414fa61162000063578063ba414fa614620000f1578063d5391393146200010f578063f8ccbf471462000119578063fa7626d414620001235762000094565b80630828e34514620000995780630a9254e414620000bf5780633a76846314620000cb578063a217fddf14620000d5575b600080fd5b620000a36200012d565b604080516001600160a01b039092168252519081900360200190f35b620000c96200013c565b005b620000a3620003da565b620000df620003f2565b60408051918252519081900360200190f35b620000fb620003f7565b604080519115158252519081900360200190f35b620000df620005c9565b620000fb620005ed565b620000fb620005fc565b6011546001600160a01b031681565b6200014662000605565b60405162000154906200071a565b604051809103906000f08015801562000171573d6000803e3d6000fd5b50601180546001600160a01b0319166001600160a01b03929092169190911790556040805163ca669fa760e01b81523060048201529051737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa791602480830192600092919082900301818387803b158015620001e557600080fd5b505af1158015620001fa573d6000803e3d6000fd5b505060115460408051632f2ff15d60e01b81527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6600482015230602482015290516001600160a01b039092169350632f2ff15d925060448082019260009290919082900301818387803b1580156200027157600080fd5b505af115801562000286573d6000803e3d6000fd5b505060115460085460408051630dcdc7dd60e41b81526001600160a01b039283166004820152678ac7230489e80000602482015260806044820152600160848201819052600060a4830181905260c0606484015260c483019190915260e48201819052915192909316945063dcdc7dd093506101048084019391929182900301818387803b1580156200031857600080fd5b505af11580156200032d573d6000803e3d6000fd5b5050601154600b5460408051630dcdc7dd60e41b81526001600160a01b039283166004820152678ac7230489e80000602482015260806044820152600160848201819052600060a4830181905260c0606484015260c483019190915260e48201819052915192909316945063dcdc7dd093506101048084019391929182900301818387803b158015620003bf57600080fd5b505af1158015620003d4573d6000803e3d6000fd5b50505050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b600081565b60008054610100900460ff16156200041b5750600054610100900460ff16620005c6565b600062000427620006ff565b15620005c35760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d60208083018290526519985a5b195960d21b838501528351808403850181526060848101909552630667f9d760e41b60808501908152815193947f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc494929391926084909101918401908083835b60208310620004d45780518252601f199092019160209182019101620004b3565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083106200053a5780518252601f19909201916020918201910162000519565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146200059e576040519150601f19603f3d011682016040523d82523d6000602084013e620005a3565b606091505b50915050808060200190516020811015620005bd57600080fd5b50519150505b90505b90565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b60005462010000900460ff1681565b60005460ff1681565b60408051610a0081019091526109c5808252737109709ecfa91a80626ff3989d68f67f5b1dd12d9163b4d6c78291731820a4b7618bde71dce8cdc73aab6c95905fad24919062003a9f60208301396040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620006b057818101518382015260200162000696565b50505050905090810190601f168015620006de5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015620003bf57600080fd5b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b151590565b61337680620007298339019056fe60806040523480156200001157600080fd5b50604080518082018252600a8152692427a829102a37b5b2b760b11b602080830191825283518085018552600581526436a427a82960d91b81830152845160008152918201909452825192939290916200006f916003919062000360565b5081516200008590600490602085019062000360565b5080516200009b906005906020840190620003e5565b5060005b600554811015620000fb5760016006600060058481548110620000be57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556001016200009f565b50604080516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054602483015260448201529051731820a4b7618bde71dce8cdc73aab6c95905fad24916329965a1d91606480830192600092919082900301818387803b1580156200017c57600080fd5b505af115801562000191573d6000803e3d6000fd5b5050604080516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a602483015260448201529051731820a4b7618bde71dce8cdc73aab6c95905fad2493506329965a1d9250606480830192600092919082900301818387803b1580156200021557600080fd5b505af11580156200022a573d6000803e3d6000fd5b50505050505050620002466000801b336200024c60201b60201c565b62000483565b6200025882826200025c565b5050565b60008281526020818152604090912062000281918390620016f8620002d5821b17901c565b15620002585762000291620002f5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002ec836001600160a01b038416620002f9565b90505b92915050565b3390565b600062000307838362000348565b6200033f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002ef565b506000620002ef565b60009081526001919091016020526040902054151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003a357805160ff1916838001178555620003d3565b82800160010185558215620003d3579182015b82811115620003d3578251825591602001919060010190620003b6565b50620003e19291506200044b565b5090565b8280548282559060005260206000209081019282156200043d579160200282015b828111156200043d57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000406565b50620003e192915062000462565b5b80821115620003e157600081556001016200044c565b5b80821115620003e15780546001600160a01b031916815560010162000463565b612ee380620004936000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063959b8c3f1161010f578063d547741f116100a2578063f772a09211610071578063f772a09214610975578063fad8b32a146109aa578063fc673c4f146109d0578063fe9d930314610b0e576101f0565b8063d547741f146107af578063d95b6371146107db578063dcdc7dd014610809578063dd62ed3e14610947576101f0565b8063a9059cbb116100de578063a9059cbb14610741578063b7d78b1a1461076d578063ca15c8731461078a578063d5391393146107a7576101f0565b8063959b8c3f1461065257806395d89b41146106785780639bd9bbc614610680578063a217fddf14610739576101f0565b8063313ce5671161018757806370a082311161015657806370a082311461059b5780639010d07c146105c157806391d1485414610600578063947975d91461062c576101f0565b8063313ce5671461040057806336568abe1461041e578063556f0dc71461044a57806362ad1b8314610452576101f0565b806323b872dd116101c357806323b872dd14610324578063248a9ca31461035a5780632497aee6146103775780632f2ff15d146103d2576101f0565b806306e48538146101f557806306fdde031461024d578063095ea7b3146102ca57806318160ddd1461030a575b600080fd5b6101fd610bb9565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610239578181015183820152602001610221565b505050509050019250505060405180910390f35b610255610c1b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028f578181015183820152602001610277565b50505050905090810190601f1680156102bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f6600480360360408110156102e057600080fd5b506001600160a01b038135169060200135610ca8565b604080519115158252519081900360200190f35b610312610ccc565b60408051918252519081900360200190f35b6102f66004803603606081101561033a57600080fd5b506001600160a01b03813581169160208101359091169060400135610cd2565b6103126004803603602081101561037057600080fd5b5035610e4f565b6103a36004803603604081101561038d57600080fd5b506001600160a01b038135169060200135610e64565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6103fe600480360360408110156103e857600080fd5b50803590602001356001600160a01b0316610ea4565b005b610408610f10565b6040805160ff9092168252519081900360200190f35b6103fe6004803603604081101561043457600080fd5b50803590602001356001600160a01b0316610f15565b610312610f76565b6103fe600480360360a081101561046857600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156104a257600080fd5b8201836020820111156104b457600080fd5b803590602001918460018302840111600160201b831117156104d557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561052757600080fd5b82018360208201111561053957600080fd5b803590602001918460018302840111600160201b8311171561055a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f7b945050505050565b610312600480360360208110156105b157600080fd5b50356001600160a01b0316610fdd565b6105e4600480360360408110156105d757600080fd5b5080359060200135610ff8565b604080516001600160a01b039092168252519081900360200190f35b6102f66004803603604081101561061657600080fd5b50803590602001356001600160a01b0316611017565b6103126004803603602081101561064257600080fd5b50356001600160801b031661102f565b6103fe6004803603602081101561066857600080fd5b50356001600160a01b031661103c565b610255611188565b6103fe6004803603606081101561069657600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156106c557600080fd5b8201836020820111156106d757600080fd5b803590602001918460018302840111600160201b831117156106f857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506111e9945050505050565b610312611213565b6102f66004803603604081101561075757600080fd5b506001600160a01b038135169060200135611218565b6103a36004803603602081101561078357600080fd5b50356112f1565b610312600480360360208110156107a057600080fd5b5035611323565b61031261133a565b6103fe600480360360408110156107c557600080fd5b50803590602001356001600160a01b031661135e565b6102f6600480360360408110156107f157600080fd5b506001600160a01b03813581169160200135166113b7565b6103fe6004803603608081101561081f57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561084e57600080fd5b82018360208201111561086057600080fd5b803590602001918460018302840111600160201b8311171561088157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156108d357600080fd5b8201836020820111156108e557600080fd5b803590602001918460018302840111600160201b8311171561090657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611458945050505050565b6103126004803603604081101561095d57600080fd5b506001600160a01b03813581169160200135166114e5565b6103126004803603604081101561098b57600080fd5b5080356001600160a01b031690602001356001600160801b0316611510565b6103fe600480360360208110156109c057600080fd5b50356001600160a01b0316611532565b6103fe600480360360808110156109e657600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610a1557600080fd5b820183602082011115610a2757600080fd5b803590602001918460018302840111600160201b83111715610a4857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610a9a57600080fd5b820183602082011115610aac57600080fd5b803590602001918460018302840111600160201b83111715610acd57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061167e945050505050565b6103fe60048036036040811015610b2457600080fd5b81359190810190604081016020820135600160201b811115610b4557600080fd5b820183602082011115610b5757600080fd5b803590602001918460018302840111600160201b83111715610b7857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116d6945050505050565b60606005805480602002602001604051908101604052809291908181526020018280548015610c1157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bf3575b5050505050905090565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c115780601f10610c7c57610100808354040283529160200191610c11565b820191906000526020600020905b815481529060010190602001808311610c8a57509395945050505050565b600080610cb361170d565b9050610cc0818585611711565b60019150505b92915050565b60025490565b60006001600160a01b038316610d195760405162461bcd60e51b8152600401808060200182810382526024815260200180612d9a6024913960400191505060405180910390fd5b6001600160a01b038416610d5e5760405162461bcd60e51b8152600401808060200182810382526026815260200180612e136026913960400191505060405180910390fd5b6000610d6861170d565b9050610d968186868660405180602001604052806000815250604051806020016040528060008152506117fd565b610dc2818686866040518060200160405280600081525060405180602001604052806000815250611a2a565b610e168582610e1186604051806060016040528060298152602001612dea602991396001600160a01b03808c166000908152600960209081526040808320938b16835292905220549190611c44565b611711565b610e448186868660405180602001604052806000815250604051806020016040528060008152506000611cdb565b506001949350505050565b60009081526020819052604090206002015490565b600a6020528160005260406000208181548110610e7d57fe5b6000918252602090912001546001600160801b038082169350600160801b90910416905082565b600082815260208190526040902060020154610ec790610ec261170d565b611017565b610f025760405162461bcd60e51b815260040180806020018281038252602f815260200180612c19602f913960400191505060405180910390fd5b610f0c8282611f60565b5050565b601290565b610f1d61170d565b6001600160a01b0316816001600160a01b031614610f6c5760405162461bcd60e51b815260040180806020018281038252602f815260200180612e7f602f913960400191505060405180910390fd5b610f0c8282611fc9565b600190565b610f8c610f8661170d565b866113b7565b610fc75760405162461bcd60e51b815260040180806020018281038252602c815260200180612dbe602c913960400191505060405180910390fd5b610fd685858585856001612032565b5050505050565b6001600160a01b031660009081526001602052604090205490565b60008281526020819052604081206110109083612109565b9392505050565b60008281526020819052604081206110109083612115565b6000610cc6600b8361212a565b806001600160a01b031661104e61170d565b6001600160a01b031614156110945760405162461bcd60e51b8152600401808060200182810382526024815260200180612cd86024913960400191505060405180910390fd5b6001600160a01b03811660009081526006602052604090205460ff16156110f757600860006110c161170d565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff1916905561113e565b60016007600061110561170d565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff19169115159190911790555b61114661170d565b6001600160a01b0316816001600160a01b03167ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f960405160405180910390a350565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c115780601f10610c7c57610100808354040283529160200191610c11565b61120e6111f461170d565b848484604051806020016040528060008152506001612032565b505050565b600081565b60006001600160a01b03831661125f5760405162461bcd60e51b8152600401808060200182810382526024815260200180612d9a6024913960400191505060405180910390fd5b600061126961170d565b90506112978182868660405180602001604052806000815250604051806020016040528060008152506117fd565b6112c3818286866040518060200160405280600081525060405180602001604052806000815250611a2a565b610cc08182868660405180602001604052806000815250604051806020016040528060008152506000611cdb565b600b81815481106112fe57fe5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b6000818152602081905260408120610cc6906122b2565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b60008281526020819052604090206002015461137c90610ec261170d565b610f6c5760405162461bcd60e51b8152600401808060200182810382526030815260200180612cfc6030913960400191505060405180910390fd5b6000816001600160a01b0316836001600160a01b0316148061142257506001600160a01b03831660009081526006602052604090205460ff16801561142257506001600160a01b0380831660009081526008602090815260408083209387168352929052205460ff16155b806110105750506001600160a01b0390811660009081526007602090815260408083209490931682529290925290205460ff1690565b6114827f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633611017565b6114d3576040805162461bcd60e51b815260206004820181905260248201527f63616c6c657220646f6573206e6f742068617665206d696e74657220726f6c65604482015290519081900360640190fd5b6114df848484846122bd565b50505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b6001600160a01b0382166000908152600a60205260408120611010908361212a565b61153a61170d565b6001600160a01b0316816001600160a01b0316141561158a5760405162461bcd60e51b8152600401808060200182810382526021815260200180612d2c6021913960400191505060405180910390fd5b6001600160a01b03811660009081526006602052604090205460ff16156115f6576001600860006115b961170d565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff1916911515919091179055611634565b6007600061160261170d565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff191690555b61163c61170d565b6001600160a01b0316816001600160a01b03167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a350565b61168f61168961170d565b856113b7565b6116ca5760405162461bcd60e51b815260040180806020018281038252602c815260200180612dbe602c913960400191505060405180910390fd5b6114df84848484612502565b610f0c6116e161170d565b838360405180602001604052806000815250612502565b6000611010836001600160a01b03841661273c565b3390565b6001600160a01b0383166117565760405162461bcd60e51b8152600401808060200182810382526025815260200180612c486025913960400191505060405180910390fd5b6001600160a01b03821661179b5760405162461bcd60e51b8152600401808060200182810382526023815260200180612e5c6023913960400191505060405180910390fd5b6001600160a01b03808416600081815260096020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6040805163555ddc6560e11b81526001600160a01b03871660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201529051600091731820a4b7618bde71dce8cdc73aab6c95905fad249163aabbb8ca91604480820192602092909190829003018186803b15801561188157600080fd5b505afa158015611895573d6000803e3d6000fd5b505050506040513d60208110156118ab57600080fd5b505190506001600160a01b03811615611a2157806001600160a01b03166375ab97828888888888886040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561195657818101518382015260200161193e565b50505050905090810190601f1680156119835780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156119b657818101518382015260200161199e565b50505050905090810190601f1680156119e35780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b158015611a0857600080fd5b505af1158015611a1c573d6000803e3d6000fd5b505050505b50505050505050565b611a3686868686612786565b611a7383604051806060016040528060278152602001612c8f602791396001600160a01b0388166000908152600160205260409020549190611c44565b6001600160a01b038087166000908152600160205260408082209390935590861681522054611aa29084612897565b60016000866001600160a01b03166001600160a01b0316815260200190815260200160002081905550836001600160a01b0316856001600160a01b0316876001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611b54578181015183820152602001611b3c565b50505050905090810190601f168015611b815780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611bb4578181015183820152602001611b9c565b50505050905090810190601f168015611be15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050505050565b60008184841115611cd35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c98578181015183820152602001611c80565b50505050905090810190601f168015611cc55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040805163555ddc6560e11b81526001600160a01b03871660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201529051600091731820a4b7618bde71dce8cdc73aab6c95905fad249163aabbb8ca91604480820192602092909190829003018186803b158015611d5f57600080fd5b505afa158015611d73573d6000803e3d6000fd5b505050506040513d6020811015611d8957600080fd5b505190506001600160a01b03811615611f0257806001600160a01b03166223de298989898989896040518763ffffffff1660e01b815260040180876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611e33578181015183820152602001611e1b565b50505050905090810190601f168015611e605780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611e93578181015183820152602001611e7b565b50505050905090810190601f168015611ec05780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b158015611ee557600080fd5b505af1158015611ef9573d6000803e3d6000fd5b50505050611f56565b8115611f5657611f1a866001600160a01b03166128f1565b15611f565760405162461bcd60e51b815260040180806020018281038252604d815260200180612d4d604d913960600191505060405180910390fd5b5050505050505050565b6000828152602081905260409020611f7890826116f8565b15610f0c57611f8561170d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020611fe1908261292d565b15610f0c57611fee61170d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b0386166120775760405162461bcd60e51b8152600401808060200182810382526022815260200180612c6d6022913960400191505060405180910390fd5b6001600160a01b0385166120d2576040805162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b60006120dc61170d565b90506120ec8188888888886117fd565b6120fa818888888888611a2a565b611a2181888888888888611cdb565b60006110108383612942565b6000611010836001600160a01b0384166129a6565b81546000908061213e576000915050610cc6565b83600182038154811061214d57fe5b6000918252602090912001546001600160801b03908116908416106121a05783600182038154811061217b57fe5b600091825260209091200154600160801b90046001600160801b03169150610cc69050565b836000815481106121ad57fe5b6000918252602090912001546001600160801b0390811690841610156121d7576000915050610cc6565b600060001982015b818111156122805760006002600183850101049050600087828154811061220257fe5b6000918252602090912001546001600160801b03908116915087168114156122595787828154811061223057fe5b600091825260209091200154600160801b90046001600160801b03169550610cc6945050505050565b866001600160801b031681101561227257819350612279565b6001820392505b50506121df565b85828154811061228c57fe5b600091825260209091200154600160801b90046001600160801b03169695505050505050565b6000610cc6826129be565b6001600160a01b038416612318576040805162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b600061232261170d565b90506123318160008787612786565b60025461233e9085612897565b6002556001600160a01b0385166000908152600160205260409020546123649085612897565b60016000876001600160a01b03166001600160a01b031681526020019081526020016000208190555061239e816000878787876001611cdb565b846001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561241d578181015183820152602001612405565b50505050905090810190601f16801561244a5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561247d578181015183820152602001612465565b50505050905090810190601f1680156124aa5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36040805185815290516001600160a01b038716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b6001600160a01b0384166125475760405162461bcd60e51b8152600401808060200182810382526022815260200180612cb66022913960400191505060405180910390fd5b600061255161170d565b9050612562818660008787876117fd565b61256f8186600087612786565b6125ac84604051806060016040528060238152602001612e39602391396001600160a01b0388166000908152600160205260409020549190611c44565b6001600160a01b0386166000908152600160205260409020556002546125d290856129c2565b600281905550846001600160a01b0316816001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561265757818101518382015260200161263f565b50505050905090810190601f1680156126845780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156126b757818101518382015260200161269f565b50505050905090810190601f1680156126e45780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36040805185815290516000916001600160a01b038816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050505050565b600061274883836129a6565b61277e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cc6565b506000610cc6565b6001600160a01b0383166127de576001600160a01b0382166000908152600a602052604090206127c8906127c3836127bd86610fdd565b90612897565b612a04565b6127d9600b6127c3836127bd610ccc565b6114df565b6001600160a01b03821661282c576001600160a01b0383166000908152600a6020526040902061281b906127c38361281587610fdd565b906129c2565b6127d9600b6127c383612815610ccc565b816001600160a01b0316836001600160a01b0316146114df576001600160a01b0383166000908152600a6020526040902061286e906127c38361281587610fdd565b6001600160a01b0382166000908152600a602052604090206114df906127c3836127bd86610fdd565b600082820183811015611010576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061292557508115155b949350505050565b6000611010836001600160a01b038416612b30565b815460009082106129845760405162461bcd60e51b8152600401808060200182810382526022815260200180612bf76022913960400191505060405180910390fd5b82600001828154811061299357fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600061101083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611c44565b6001600160801b03811115612a53576040805162461bcd60e51b815260206004820152601060248201526f63617374696e67206f766572666c6f7760801b604482015290519081900360640190fd5b8154801580612a84575043836001830381548110612a6d57fe5b6000918252602090912001546001600160801b0316105b15612af55760408051808201909152436001600160801b0390811682528381166020808401918252865460018101885560008881529190912093519301805491516fffffffffffffffffffffffffffffffff19909216938316939093178216600160801b919092160217905561120e565b81836001830381548110612b0557fe5b600091825260209091200180546001600160801b03928316600160801b029216919091179055505050565b60008181526001830160205260408120548015612bec5783546000198083019190810190600090879083908110612b6357fe5b9060005260206000200154905080876000018481548110612b8057fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612bb057fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610cc6565b6000915050610cc656fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744552433737373a20617070726f76652066726f6d20746865207a65726f20616464726573734552433737373a2073656e642066726f6d20746865207a65726f20616464726573734552433737373a207472616e7366657220616d6f756e7420657863656564732062616c616e63654552433737373a206275726e2066726f6d20746865207a65726f20616464726573734552433737373a20617574686f72697a696e672073656c66206173206f70657261746f72416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654552433737373a207265766f6b696e672073656c66206173206f70657261746f724552433737373a20746f6b656e20726563697069656e7420636f6e747261637420686173206e6f20696d706c656d656e74657220666f7220455243373737546f6b656e73526563697069656e744552433737373a207472616e7366657220746f20746865207a65726f20616464726573734552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f7220666f7220686f6c6465724552433737373a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654552433737373a207472616e736665722066726f6d20746865207a65726f20616464726573734552433737373a206275726e20616d6f756e7420657863656564732062616c616e63654552433737373a20617070726f766520746f20746865207a65726f2061646472657373416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220974fc206aab38718f35e2d352a1606d1290e0400cc4d19f2880f456b007a14ba64736f6c634300060c0033608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a41e7d5111610078578063a41e7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f712f3e814610280576100a5565b806329965a1d146100aa5780633d584063146100e25780635df8122f1461012457806365ba36c114610152575b600080fd5b6100e0600480360360608110156100c057600080fd5b50600160a060020a038135811691602081013591604090910135166102b6565b005b610108600480360360208110156100f857600080fd5b5035600160a060020a0316610570565b60408051600160a060020a039092168252519081900360200190f35b6100e06004803603604081101561013a57600080fd5b50600160a060020a03813581169160200135166105bc565b6101c26004803603602081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b5090925090506106b3565b60408051918252519081900360200190f35b6100e0600480360360408110156101ea57600080fd5b508035600160a060020a03169060200135600160e060020a0319166106ee565b6101086004803603604081101561022057600080fd5b50600160a060020a038135169060200135610778565b61026c6004803603604081101561024c57600080fd5b508035600160a060020a03169060200135600160e060020a0319166107ef565b604080519115158252519081900360200190f35b61026c6004803603604081101561029657600080fd5b508035600160a060020a03169060200135600160e060020a0319166108aa565b6000600160a060020a038416156102cd57836102cf565b335b9050336102db82610570565b600160a060020a031614610339576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6103428361092a565b15610397576040805160e560020a62461bcd02815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103b85750600160a060020a0382163314155b156104ff5760405160200180807f455243313832305f4143434550545f4d4147494300000000000000000000000081525060140190506040516020818303038152906040528051906020012082600160a060020a031663249cb3fa85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104ff576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03818116600090815260016020526040812054909116151561059a5750806105b7565b50600160a060020a03808216600090815260016020526040902054165b919050565b336105c683610570565b600160a060020a031614610624576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146106435780610646565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106f882826107ef565b610703576000610705565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b600080600160a060020a038416156107905783610792565b335b905061079d8361092a565b156107c357826107ad82826108aa565b6107b85760006107ba565b815b925050506106e8565b600160a060020a0390811660009081526020818152604080832086845290915290205416905092915050565b6000808061081d857f01ffc9a70000000000000000000000000000000000000000000000000000000061094c565b909250905081158061082d575080155b1561083d576000925050506106e8565b61084f85600160e060020a031961094c565b909250905081158061086057508015155b15610870576000925050506106e8565b61087a858561094c565b909250905060018214801561088f5750806001145b1561089f576001925050506106e8565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108f2576108eb83836107ef565b90506106e8565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9949f163f319021a6e9c687c292a5e2b2c4734c126b524e6c0029a2646970667358221220b6831a6d1cf951e25534499a8a074919cc6cfc88bf37195e1668e2b1af30b7be64736f6c634300060c0033ba5734d8f7091719471e7f7ed6b9df170dc70cc661ca05e688601ad984f068b0d67351e5f06073092499336ab0839ef8a521afd334e53807205fa2f08eec74f48318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa59d9031e97dd78ff8c15aa86939de9b1e791066a0224e331bc962a2099a7b1f0464b8bbafe1535f2301c72c2cb3535b172da30b02686ab0393d348614f157fbdb" . parse () . expect ("invalid bytecode")
        });
    pub struct HoprTokenFixture<M>(ethers::contract::Contract<M>);
    impl<M> Clone for HoprTokenFixture<M> {
        fn clone(&self) -> Self {
            HoprTokenFixture(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for HoprTokenFixture<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for HoprTokenFixture<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(HoprTokenFixture))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> HoprTokenFixture<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), HOPRTOKENFIXTURE_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                HOPRTOKENFIXTURE_ABI.clone(),
                HOPRTOKENFIXTURE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `DEFAULT_ADMIN_ROLE` (0xa217fddf) function"]
        pub fn default_admin_role(&self) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([162, 23, 253, 223], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `MINTER_ROLE` (0xd5391393) function"]
        pub fn minter_role(&self) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([213, 57, 19, 147], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoprToken` (0x0828e345) function"]
        pub fn hopr_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([8, 40, 227, 69], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, HoprTokenFixtureEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for HoprTokenFixture<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum HoprTokenFixtureEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for HoprTokenFixtureEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(HoprTokenFixtureEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for HoprTokenFixtureEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprTokenFixtureEvents::LogFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogAddressFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogArray1Filter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogArray2Filter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogArray3Filter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogBytesFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogBytes32Filter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogIntFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedAddressFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedArray1Filter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedArray2Filter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedArray3Filter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedBytesFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedIntFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedStringFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogNamedUintFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogStringFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogUintFilter(element) => element.fmt(f),
                HoprTokenFixtureEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `DEFAULT_ADMIN_ROLE` function with signature `DEFAULT_ADMIN_ROLE()` and selector `[162, 23, 253, 223]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "DEFAULT_ADMIN_ROLE", abi = "DEFAULT_ADMIN_ROLE()")]
    pub struct DefaultAdminRoleCall;
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `MINTER_ROLE` function with signature `MINTER_ROLE()` and selector `[213, 57, 19, 147]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "MINTER_ROLE", abi = "MINTER_ROLE()")]
    pub struct MinterRoleCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoprToken` function with signature `hoprToken()` and selector `[8, 40, 227, 69]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "hoprToken", abi = "hoprToken()")]
    pub struct HoprTokenCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum HoprTokenFixtureCalls {
        DefaultAdminRole(DefaultAdminRoleCall),
        IsScript(IsScriptCall),
        IsTest(IsTestCall),
        MinterRole(MinterRoleCall),
        Failed(FailedCall),
        HoprToken(HoprTokenCall),
        SetUp(SetUpCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for HoprTokenFixtureCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <DefaultAdminRoleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprTokenFixtureCalls::DefaultAdminRole(decoded));
            }
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprTokenFixtureCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprTokenFixtureCalls::IsTest(decoded));
            }
            if let Ok(decoded) =
                <MinterRoleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprTokenFixtureCalls::MinterRole(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprTokenFixtureCalls::Failed(decoded));
            }
            if let Ok(decoded) =
                <HoprTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprTokenFixtureCalls::HoprToken(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprTokenFixtureCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprTokenFixtureCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for HoprTokenFixtureCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                HoprTokenFixtureCalls::DefaultAdminRole(element) => element.encode(),
                HoprTokenFixtureCalls::IsScript(element) => element.encode(),
                HoprTokenFixtureCalls::IsTest(element) => element.encode(),
                HoprTokenFixtureCalls::MinterRole(element) => element.encode(),
                HoprTokenFixtureCalls::Failed(element) => element.encode(),
                HoprTokenFixtureCalls::HoprToken(element) => element.encode(),
                HoprTokenFixtureCalls::SetUp(element) => element.encode(),
                HoprTokenFixtureCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for HoprTokenFixtureCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprTokenFixtureCalls::DefaultAdminRole(element) => element.fmt(f),
                HoprTokenFixtureCalls::IsScript(element) => element.fmt(f),
                HoprTokenFixtureCalls::IsTest(element) => element.fmt(f),
                HoprTokenFixtureCalls::MinterRole(element) => element.fmt(f),
                HoprTokenFixtureCalls::Failed(element) => element.fmt(f),
                HoprTokenFixtureCalls::HoprToken(element) => element.fmt(f),
                HoprTokenFixtureCalls::SetUp(element) => element.fmt(f),
                HoprTokenFixtureCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<DefaultAdminRoleCall> for HoprTokenFixtureCalls {
        fn from(var: DefaultAdminRoleCall) -> Self {
            HoprTokenFixtureCalls::DefaultAdminRole(var)
        }
    }
    impl ::std::convert::From<IsScriptCall> for HoprTokenFixtureCalls {
        fn from(var: IsScriptCall) -> Self {
            HoprTokenFixtureCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<IsTestCall> for HoprTokenFixtureCalls {
        fn from(var: IsTestCall) -> Self {
            HoprTokenFixtureCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<MinterRoleCall> for HoprTokenFixtureCalls {
        fn from(var: MinterRoleCall) -> Self {
            HoprTokenFixtureCalls::MinterRole(var)
        }
    }
    impl ::std::convert::From<FailedCall> for HoprTokenFixtureCalls {
        fn from(var: FailedCall) -> Self {
            HoprTokenFixtureCalls::Failed(var)
        }
    }
    impl ::std::convert::From<HoprTokenCall> for HoprTokenFixtureCalls {
        fn from(var: HoprTokenCall) -> Self {
            HoprTokenFixtureCalls::HoprToken(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for HoprTokenFixtureCalls {
        fn from(var: SetUpCall) -> Self {
            HoprTokenFixtureCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<VmCall> for HoprTokenFixtureCalls {
        fn from(var: VmCall) -> Self {
            HoprTokenFixtureCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `DEFAULT_ADMIN_ROLE` function with signature `DEFAULT_ADMIN_ROLE()` and selector `[162, 23, 253, 223]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct DefaultAdminRoleReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `MINTER_ROLE` function with signature `MINTER_ROLE()` and selector `[213, 57, 19, 147]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct MinterRoleReturn(pub [u8; 32]);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `hoprToken` function with signature `hoprToken()` and selector `[8, 40, 227, 69]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct HoprTokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
