---
id: hello-world-terminal
title: Hello World in Terminal
---

This is the complete tutorial on how to send messages over the HOPR network using just your terminal. At this point it is assumed you have a running [local cluster](./starting-local-cluster.md) or are using [Playground](https://playground.hoprnet.org/).

Lets start by connecting to our nodes and verifying some basic functionality using both the REST and Websocket endpoints.

## Requirements

### 1. Get the node security credentials

To avoid unsecured access to your HOPR node, all HOPR node's WebSocket and REST calls require an `apiToken`. Your API token needs to be appended as a
`query` parameter for WebSocket connections and as an encoded token via the `Authorization` header for you to be able to connect to it. You will not be
able to connect to your HOPR node without its `apiToken`.

:::info Tip
The flag used to set this value in a HOPR node via `hoprd` is `--apiToken`. The default `apiToken` used across our documentation is the following one,
so make sure to change it when running your own node in a public network.
<br/>

```
^^LOCAL-testing-123^^
```

:::

Make sure to export your `apiToken` to be used in the incoming commands, and every time you open a new terminal.

```bash
export apiToken="^^LOCAL-testing-123^^"
```

### 2. Export your HOPR node REST/WebSocket endpoints

If you followed the guide in the ["HOPR Cluster Development Setup"](/developers/starting-local-cluster) section, these will be already exported in your current terminal. Otherwise, you can run the following commands to ensure at least your first node's endpoints are exported.

As an alternative, you an also run a single HOPR node following our [monorepo](https://github.com/hoprnet/hoprnet#develop) instructions or use a 

<details>
  <summary>Export REST and WebSocket endpoints (from local HOPR cluster)</summary>
  <div>
    <div>
    <h3>Node 1</h3>
    <br/>
    <pre>
    export HOPR_NODE_1_HTTP_URL=http://127.0.0.1:13301 HOPR_NODE_1_WS_URL=ws://127.0.0.1:19501
    </pre>
    <h3>API token & Node 1</h3>
    <br/>
    <pre>
    export apiToken=^^LOCAL-testing-123^^ HOPR_NODE_1_HTTP_URL=http://127.0.0.1:13301 HOPR_NODE_1_WS_URL=ws://127.0.0.1:19501
    </pre>
    </div>
    <br/>
  </div>
</details>

<details>
  <summary>Export REST and WebSocket endpoints (from a single localhost HOPR node)</summary>
  <div>
    <div>
    <h3>Node 1</h3>
    <br/>
    <pre>
    export HOPR_NODE_1_HTTP_URL=http://127.0.0.1:3001 HOPR_NODE_1_WS_URL=ws://127.0.0.1:3000
    </pre>
    <h3>API token & Node 1</h3>
    <br/>
    <pre>
    export apiToken=^^LOCAL-testing-123^^ HOPR_NODE_1_HTTP_URL=http://127.0.0.1:3001 HOPR_NODE_1_WS_URL=ws://127.0.0.1:3000
    </pre>
    </div>
    <br/>
  </div>
</details>

We use `127.0.0.1` instead of `localhost` as some tools like `websocat` (described below) struggle to resolve `localhost` properly. For Playground users, use the URL and apiToken from the Playground cluster and the ports `3000` & `3001`. E.g. `HOPR_NODE_1_HTTP_URL=https://zero_amalthea_fuchsia_aras.playground.hoprnet.org:3001` & `HOPR_NODE_1_WS_URL=ws://zero_amalthea_fuchsia_aras.playground.hoprnet.org:3000`

To export all REST and webSocket endpoints for the default local cluster copy and paste these URLs into your terminal:

```bash
export apiToken=^^LOCAL-testing-123^^ HOPR_NODE_1_HTTP_URL=http://127.0.0.1:13301 HOPR_NODE_1_WS_URL=ws://127.0.0.1:19501 HOPR_NODE_2_HTTP_URL=http://127.0.0.1:13302 HOPR_NODE_2_WS_URL=ws://127.0.0.1:19502 HOPR_NODE_3_HTTP_URL=http://127.0.0.1:13303 HOPR_NODE_3_WS_URL=ws://127.0.0.1:19503 HOPR_NODE_4_HTTP_URL=http://127.0.0.1:13304 HOPR_NODE_4_WS_URL=ws://127.0.0.1:19504 HOPR_NODE_5_HTTP_URL=http://127.0.0.1:13305 HOPR_NODE_5_WS_URL=ws://127.0.0.1:19505
```

### 3. Install a WebSocket and REST client

To properly[^1] interact with a HOPR node, you'll need both REST and WebSocket client software. A REST client is used to give instructions to your
HOPR node via its REST API, and the WebSocket client is to listen to these interactions, usually given by other nodes.

We recommend using `curl` and `websocat` to interact with both endpoints. These tools are terminal only and supported by any `Unix`-based OS.
If you would like to use a UI-based alternative, please check the [Hello World in Browser tutorial.](./hello-world-browser)
For the purposes of this guide, `curl` and `websocat` will be assumed.

<details>
  <summary>Installing curl</summary>
  <div>
    <div>Most <code>Unix</code>-based systems already have <code>curl</code> installed, but if you don't have it you can always use the default package manager to do so. For instance, here’s how you install `curl` in Ubuntu:

<pre>
sudo apt-get install curl
</pre>

You can see if <code>curl</code> is installed in your system by running <code>which curl</code> or simply running <code>curl</code>, which will output a message like the following:

<pre>
curl: try 'curl --help' or 'curl --manual' for more information
</pre>
  </div>
  </div>
</details>

<details>
  <summary>Installing websocat</summary>
  <div>
    <div>
    <p>Our suggested client is <a href="https://github.com/vi/websocat" target="_blank" noreferral>websocat</a>, which you can install by running our
<code>./install-websocat.sh</code> <a href="https://raw.githubusercontent.com/hoprnet/hoprnet/master/scripts/install-websocat.sh" taget="_blank" noreferral>script</a> from our monorepo. To install, make sure to run it from the <code>scripts</code> folder, as by default it will install it in the parent folder under a <code>.bin</code> folder, and will not export it to your <code>$PATH</code>.</p>
<br/>
<b>Go to the scripts folder within the monorepo</b>
<pre>
cd scripts
</pre>

<b>Install script</b>

<pre>
./install-websocat.sh
</pre>

<p>
You can see if <code>websocat</code> has been installed by running <code>.bin/websocat</code>.
</p>

  </div>
  </div>
</details>

## Connect to a HOPR node

From here if you prefer to work with a browser UI instead of the terminal you should switch to [the browser version of this tutorial.](./hello-world-browser)

### 1. Test REST API connectivity

**Testing the REST API with `curl`**

Using your node's `apiToken` and your `HOPR_NODE_1_HTTP_URL` from the ["Running a local HOPR Cluster"](/developers/starting-local-cluster) section (likely `127.0.0.1:3001` or `127.0.0.1:13301`), try to send a REST command to query its address with the following `curl` command.

Adjustments:

- If you haven't exported your `HOPR_NODE_1_HTTP_URL` and `apiToken`, replace `$apiToken` and `$HOPR_NODE_1_HTTP_URL` with your nodes API URL and apiToken.
- If you don't have `jq` installed, just remove it from the end of the command.

```bash
echo -n $apiToken | base64 | xargs -I {} curl -s -H "Authorization: Basic {}" $HOPR_NODE_1_HTTP_URL/api/v2/account/address | jq
```

If successful, you should get a response similar to this one:

```json
{
  "nativeAddress": "0x3a54dDE3ee5ACfd43C902cbecC8ED0CBA10Ff326",
  "native": "0x3a54dDE3ee5ACfd43C902cbecC8ED0CBA10Ff326",
  "hoprAddress": "16Uiu2HAmE9b3TSHeF25uJS1Ecf2Js3TutnaSnipdV9otEpxbRN8Q",
  "hopr": "16Uiu2HAmE9b3TSHeF25uJS1Ecf2Js3TutnaSnipdV9otEpxbRN8Q"
}
```

If you've made a mistake, for example forgotting to use `-n` in your `echo` or using the wrong `apiToken`, you’ll see the following instead:

```json
{
  "status": 403,
  "challenge": "Basic realm=hoprd",
  "message": "You must authenticate to access hoprd."
}
```

### 2. Test WebSocket connectivity

Unlike our REST API endpoint, seeing interactions with your HOPR node WebSocket server requires a WebSocket client that will remain open to listen to all messages sent to our HOPR node.

**Connecting to your HOPR node WebSocket server**

With `websocat` installed, please go up one directory to exit the scripts folder: `cd ..` and run the following command to connect to your HOPR node WebSocket server.

```bash
.bin/websocat "$(echo "$HOPR_NODE_1_WS_URL" | sed "s/http/ws/")/?apiToken=$apiToken"
```

:::info Note

Please note that you need to use your `HOPR_NODE_1_WS_URL` (likely `127.0.0.1:3000` or `127.0.0.1:19501`) instead of the `HOPR_NODE_1_HTTP_URL` from the previous step. Your `HOPR_NODE_1_WS_URL` is also referred as `Admin URL` in our tools.

:::

If everything worked correctly, you should see a dump of messages, the last one being:

```json
{ "type": "log", "msg": "ws client connected [ authentication ENABLED ]", "ts": "2022-02-01T19:42:34.152Z" }
```

Now that you are connected, try typing `balance` in the same terminal, which should output as follows:

```json
{"type":"log","msg":"admin > balance\n","ts":"2022-02-01T19:42:35.417Z"}
{"type":"log","msg":"HOPR Balance:  9.6 txHOPR\nETH Balance:   0.99871794476851171 xDAI","ts":"2022-02-01T19:42:35.421Z"}
```

With the connection verified to both our REST and WebSocket endpoints, we can now go ahead and go through the basic functions of the API to send
messages across nodes.

## Send messages

The HOPR protocol allows you to send private messages between nodes by using other nodes as relayers. Each message “hops” (hence the
name “HOPR”) until it reaches its final destination, its contents are known only to the final recipient. This is done automatically
by HOPR nodes, which pick a random path to send your message to your recipient.

The path consists of at least `2` nodes that have channels opened between each other. For instance, to send a message to `node 2`
from `node 1`, one path a message could take is `node 1 -> node 4 -> node 3 -> node 2`. Since HOPR clusters have channels open between all nodes, all possible paths are available.

To try this out, let's use the REST API from `node 1` and send a message to `node 2`, which we'll be able to see via our
WebSocket client connection.

### 1. Obtaining the address (`PeerId`) of `node 2`

Using `node 2`, type the following command in your terminal with `websocat` running or the WebSocket client interface:

```bash
address
```

You should see a response like the following:

```json
{"type":"log","msg":"admin > address\n","ts":"2022-02-02T19:17:48.431Z"}
{"type":"log","msg":"HOPR Address:  16Uiu2HAmKhrwGWcvaZ3ic5dgy7oFawmnELJGBrySSsNo4bzGBxHW\nETH Address:   0x4cD95E1deF16D5913255Fe0af208EdDe2e04d720","ts":"2022-02-02T19:17:48.435Z"}
```

As you can see, the address or PeerId of `node 2` is `16Uiu2HAmKhrwGWcvaZ3ic5dgy7oFawmnELJGBrySSsNo4bzGBxHW`. You can use that
information to send a message from `node 1`. Make sure to keep your WebSocket client connected to see any messages received by `node 2`

### 2. Sending a message to `node 2` from `node 1`:

To send a message from `node 1` to `node 2`, we need to use `node 1`'s REST API, specifically the `/messages` endpoint. Using `curl`
or any other HTTP client, send the following request:

```bash
curl -X 'POST' \
  "$HOPR_NODE_1_HTTP_URL/api/v2/messages/" \
  -H 'accept: */*' \
  -H "x-auth-token: $apiToken" \
  -H 'Content-Type: application/json' \
  -d "{
  \"body\": \"Hello world from Node 1\",
  \"recipient\": \"$HOPR_NODE_2_ADDR\"
}"
```

In the terminal of `node 2`, you will see something similar to this:

```json
{"type":"log","msg":"#### NODE RECEIVED MESSAGE [2022-02-03T21:48:13.845Z] ####","ts":"2022-02-03T21:48:13.845Z"}
{"type":"log","msg":"Message: Hello world","ts":"2022-02-03T21:48:13.846Z"}
{"type":"log","msg":"Latency: 668ms","ts":"2022-02-03T21:48:13.846Z"}
{"type":"message","msg":"Hello world","ts":"2022-02-03T21:48:13.847Z"}
```

Congratulations! You have sent your first message using the HOPR protocol!

### 3. Extra: Channels and tickets

You cannot send unlimited messages[^2]. Each message requires `tickets` and headers with signatures for claiming
balance updates in a `HOPR` token balanced payment channel. For every relayer you use (default `2`), you need to "attach"
`HOPR` tokens (`0.01` per relay) which are used to pay for the relayer's work. Tickets are settled in a single global entry
`HoprChannels` Ethereum contract.

The previous message worked because a cluster is configured by default to open a few channels and lock enough `HOPR`
tokens to send messages to at least `2` relayers. When a path used to relay has depleted (empty) or closed `channels`,
your message will not be forwarded. You can always see your open `channels` and their balance with the following command:

```bash
channels
```

You can see your balance via the following command:

```bash
balance
```

## Using Web Browser



## Walkthrough

If you need help completing this tutorial, you can watch our 15-minute walkthrough, which also includes the setup of the local HOPR cluster.

**Note:** The tutorial uses a GitPod setup which is currently depreciated. You should follow the tutorial through your terminal ignoring the setup process.

<figure class="video-container" style={{"marginTop": "-100px", "marginBottom": "-100px"}}>
  <iframe src="https://player.vimeo.com/video/672847960?h=bc02050298" width="640" height="564" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
</figure>


[^1]:
    Although you can successfully interact with a HOPR node only using a WebSocket client, it is recommended to always use the REST API
    to send commands to the HOPR node. This is because the API is optimized for applications, whereas the WebSocket commands are mostly used within the
    `hopr-admin` UI, an operator-targeted tooling used to verify the functionality of the node. In other words, only use the WebSocket server
    when you need to process information sent to a node, and use the REST API when you need to write actions to a node.

[^2]:
    When a HOPR node uses the `/api/v2/messages` REST API endpoint to send a message, it will use a random path of at
    least `2` nodes as relayers. These messages cost `$HOPR` tokens because it pays each relayer accordingly to forward the
    packet. However, you can also send what is known as `0-hop` messages, which bear no cost but provides no privacy, as
    the message is sent directly to the recipient. The REST API endpoint does not expose this, but you can send a `0-hop`
    message via the HOPR admin UI or WebSocket client by typing `send ,$peerId message`.

